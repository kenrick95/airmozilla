# This is an example settings/local.py file.
# These settings overrides what's in settings/base.py

from . import base

# To extend any settings from settings/base.py here's an example:
#INSTALLED_APPS = base.INSTALLED_APPS + ('debug_toolbar',)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'airmozilla',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    },
    # 'slave': {
    #     ...
    # },
}


# Uncomment this and set to all slave DBs in use on the site.
# SLAVE_DATABASES = ['slave']

# Recipients of traceback emails and other notifications.
ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)
MANAGERS = ADMINS

# Debugging displays nice error messages, but leaks memory. Set this to False
# on all server instances and True only for development.
#DEBUG = TEMPLATE_DEBUG = True

# To get all exceptions and tracebacks in the terminal instead of Django errors
#DEBUG_PROPAGATE_EXCEPTIONS = True

# If you intend to run on something like http://127.0.0.1:8000 then
# set this False so cookies can be set with HTTP
#SESSION_COOKIE_SECURE = False

# By default, BrowserID expects your app to use http://127.0.0.1:8000
# Uncomment the following line if you prefer to access your app via localhost
#SITE_URL = 'http://localhost:8000'

# Make this unique, and don't share it with anybody.  It cannot be blank.
SECRET_KEY = ''

## Log settings

# SYSLOG_TAG = "http_app_playdoh"  # Make this unique to your project.
# LOGGING = dict(loggers=dict(playdoh={'level': logging.DEBUG}))


# Caching - use memcached
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'KEY_PREFIX': 'airmoz',
        'TIMEOUT': 6 * 60 * 60,
        'LOCATION': 'localhost:11211'
    }
}
# If you don't want to use memcache, you can use the built in one
#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#        'LOCATION': 'unique-snowflake'
#    }
#}


# Email backend - fill in with SMTP details
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = ''
EMAIL_PORT = 25
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = True

EMAIL_FROM_ADDRESS = 'airmozilla-ops@mozilla.com'

# for debugging/development
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# These need to be filled in to able to use Vid.ly's secure tokens
# See https://bugzilla.mozilla.org/show_bug.cgi?id=798572#c2
VIDLY_USER_ID = ''
VIDLY_USER_KEY = ''

# And this is needed for EdgeCast
EDGECAST_SECURE_KEY = ''

# Needed for secure streams with Akamai
AKAMAI_SECURE_KEY = ''

# Needed to be able to look up vouced users
MOZILLIANS_API_KEY = ''
MOZILLIANS_API_APPNAME = 'air_mozilla'
# optional
#MOZILLIANS_API_BASE = 'https://mozillians.allizom.org'

# needed to be able to tweet
TWITTER_USERNAME = 'airmozilla'
TWITTER_CONSUMER_SECRET = ''
TWITTER_CONSUMER_KEY = ''
TWITTER_ACCESS_TOKEN = ''
TWITTER_ACCESS_TOKEN_SECRET = ''

# if you have passwords for URL tranforms
#URL_TRANSFORM_PASSWORDS = {'encoder-commons-mtv1': ...}

# Bit.ly URL shortener access token
BITLY_ACCESS_TOKEN = ''

# To get your Sentry key, go to https://errormill.mozilla.org/
#RAVEN_CONFIG = {
#    'dsn': ''  # see https://errormill.mozilla.org/
#}

# Talk to your friendly IT guys to fill this in
AWS_ACCESS_KEY_ID = ''
AWS_SECRET_ACCESS_KEY = ''
#S3_UPLOAD_BUCKET = 'air-mozilla-uploads'

# Readability API key for the Parser
# See http://www.readability.com/account/api
#READABILITY_PARSER_KEY = ''

# Credentials for scraping certain sites
#SCRAPE_CREDENTIALS = {
#     ('username', 'password'): ['intranet.mozilla.org'],
#}

# To use Autocompeter to submit titles you need a key.
# To generate your own visit https://autocompeter.com and sign in
# with your GitHub account.
# Also, this has to be non-empty or else the auto-complete is disabled.
#AUTOCOMPETER_KEY = 'somesecurekey'

# To override the default Autocompeter URL change this
#AUTOCOMPETER_URL = 'https://autocompeter.com/v1'

# By default the Autocompete integration will use the current
# request domain as the domain for searches. If you need to override
# this change this setting.
# Setting this to 'air.mozilla.org' will mean it can use the production
# domain even when you run it locally.
#AUTOCOMPETER_DOMAIN = ''

# If you don't want to run a separate Celeryd process you can set this to True
#CELERY_ALWAYS_EAGER = True
#CELERY_EAGER_PROPAGATES_EXCEPTIONS = True

# By default Celeryd is configured to simply write to its own database.
# For production we probably want to override this with a RabbitMQ URL
# or something like that.
#BROKER_URL = 'django://'
